{"version":3,"file":"BlendColor.min.mjs","sources":["../../../src/filters/BlendColor.ts"],"sourcesContent":["import { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\ntype BlendColorOwnProps = {\n  color: string;\n  mode: TBlendMode;\n  alpha: number;\n};\n\nexport const blendColorDefaultValues: BlendColorOwnProps = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter<'BlendColor', BlendColorOwnProps> {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: BlendColorOwnProps['color'];\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendColorOwnProps['mode'];\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: BlendColorOwnProps['alpha'];\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  static uniformLocations = ['uColor'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const alpha = this.alpha;\n    const tr = source[0] * alpha;\n    const tg = source[1] * alpha;\n    const tb = source[2] * alpha;\n    const alpha1 = 1 - alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      let oR, oG, oB;\n      switch (this.mode) {\n        case 'multiply':\n          oR = (r * tr) / 255;\n          oG = (g * tg) / 255;\n          oB = (b * tb) / 255;\n          break;\n        case 'screen':\n          oR = 255 - ((255 - r) * (255 - tr)) / 255;\n          oG = 255 - ((255 - g) * (255 - tg)) / 255;\n          oB = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          oR = r + tr;\n          oG = g + tg;\n          oB = b + tb;\n          break;\n        case 'difference':\n          oR = Math.abs(r - tr);\n          oG = Math.abs(g - tg);\n          oB = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          oR = r - tr;\n          oG = g - tg;\n          oB = b - tb;\n          break;\n        case 'darken':\n          oR = Math.min(r, tr);\n          oG = Math.min(g, tg);\n          oB = Math.min(b, tb);\n          break;\n        case 'lighten':\n          oR = Math.max(r, tr);\n          oG = Math.max(g, tg);\n          oB = Math.max(b, tb);\n          break;\n        case 'overlay':\n          oR =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          oG =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          oB =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          oR = tr + r - (2 * tr * r) / 255;\n          oG = tg + g - (2 * tg * g) / 255;\n          oB = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          oR = tr + r * alpha1;\n          oG = tg + g * alpha1;\n          oB = tb + b * alpha1;\n      }\n      data[i] = oR;\n      data[i + 1] = oG;\n      data[i + 2] = oB;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n"],"names":["blendColorDefaultValues","color","mode","alpha","BlendColor","BaseFilter","getCacheKey","concat","this","type","getFragmentSource","blendColorFragmentSource","applyTo2d","_ref","imageData","data","source","Color","getSource","tr","tg","tb","alpha1","i","length","r","g","b","oR","oG","oB","Math","abs","min","max","sendUniformData","gl","uniformLocations","uniform4fv","uColor","_defineProperty","classRegistry","setClass"],"mappings":"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"}