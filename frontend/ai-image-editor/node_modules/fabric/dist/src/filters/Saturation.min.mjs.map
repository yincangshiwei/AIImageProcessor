{"version":3,"file":"Saturation.min.mjs","sources":["../../../src/filters/Saturation.ts"],"sourcesContent":["import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\nexport type SaturationOwnProps = {\n  saturation: number;\n};\n\nexport const saturationDefaultValues: SaturationOwnProps = {\n  saturation: 0,\n};\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Saturation extends BaseFilter<'Saturation', SaturationOwnProps> {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: SaturationOwnProps['saturation'];\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  static uniformLocations = ['uSaturation'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      data[i] += max !== r ? (max - r) * adjust : 0;\n      data[i + 1] += max !== g ? (max - g) * adjust : 0;\n      data[i + 2] += max !== b ? (max - b) * adjust : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n\n  isNeutralState() {\n    return this.saturation === 0;\n  }\n}\n\nclassRegistry.setClass(Saturation);\n"],"names":["saturationDefaultValues","saturation","Saturation","BaseFilter","getFragmentSource","fragmentSource","applyTo2d","_ref","imageData","data","adjust","this","i","length","r","g","b","max","Math","sendUniformData","gl","uniformLocations","uniform1f","uSaturation","isNeutralState","_defineProperty","classRegistry","setClass"],"mappings":"2PASO,MAAMA,EAA8C,CACzDC,WAAY,GAYP,MAAMC,UAAmBC,EAiB9BC,iBAAAA,GACE,OAAOC,CACT,CAQAC,SAAAA,CAASC,GAA4C,IAAzCC,WAAWC,KAAEA,IAA0BF,EACjD,MAAMG,GAAUC,KAAKV,WACrB,IAAK,IAAIW,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,GAAK,EAAG,CACvC,MAAME,EAAIL,EAAKG,GACTG,EAAIN,EAAKG,EAAI,GACbI,EAAIP,EAAKG,EAAI,GACbK,EAAMC,KAAKD,IAAIH,EAAGC,EAAGC,GAC3BP,EAAKG,IAAMK,IAAQH,GAAKG,EAAMH,GAAKJ,EAAS,EAC5CD,EAAKG,EAAI,IAAMK,IAAQF,GAAKE,EAAMF,GAAKL,EAAS,EAChDD,EAAKG,EAAI,IAAMK,IAAQD,GAAKC,EAAMD,GAAKN,EAAS,CAClD,CACF,CAQAS,eAAAA,CACEC,EACAC,GAEAD,EAAGE,UAAUD,EAAiBE,aAAcZ,KAAKV,WACnD,CAEAuB,cAAAA,GACE,OAA2B,IAApBb,KAAKV,UACd,EAtDAwB,EADWvB,EAAU,OAWP,cAAYuB,EAXfvB,EAAU,WAaHF,GAAuByB,EAb9BvB,EAee,mBAAA,CAAC,gBA2C7BwB,EAAcC,SAASzB"}