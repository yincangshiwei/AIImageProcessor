{"version":3,"file":"HueRotation.min.mjs","sources":["../../../src/filters/HueRotation.ts"],"sourcesContent":["import { cos } from '../util/misc/cos';\nimport { sin } from '../util/misc/sin';\nimport {\n  ColorMatrix,\n  type ColorMatrixOwnProps,\n  colorMatrixDefaultValues,\n} from './ColorMatrix';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\n\nexport type HueRotationOwnProps = ColorMatrixOwnProps & {\n  rotation: number;\n};\n\nexport type HueRotationSerializedProps = {\n  rotation: number;\n};\n\nexport const hueRotationDefaultValues: HueRotationOwnProps = {\n  ...colorMatrixDefaultValues,\n  rotation: 0,\n};\n\n/**\n * HueRotation filter class\n * @example\n * const filter = new HueRotation({\n *   rotation: -0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class HueRotation extends ColorMatrix<\n  'HueRotation',\n  HueRotationOwnProps,\n  HueRotationSerializedProps\n> {\n  /**\n   * HueRotation value, from -1 to 1.\n   */\n  declare rotation: HueRotationOwnProps['rotation'];\n\n  static type = 'HueRotation';\n\n  static defaults = hueRotationDefaultValues;\n\n  calculateMatrix() {\n    const rad = this.rotation * Math.PI,\n      cosine = cos(rad),\n      sine = sin(rad),\n      aThird = 1 / 3,\n      aThirdSqtSin = Math.sqrt(aThird) * sine,\n      OneMinusCos = 1 - cosine;\n    this.matrix = [\n      cosine + OneMinusCos / 3,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      aThird * OneMinusCos - aThirdSqtSin,\n      0,\n      0,\n      aThird * OneMinusCos - aThirdSqtSin,\n      aThird * OneMinusCos + aThirdSqtSin,\n      cosine + aThird * OneMinusCos,\n      0,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n    ];\n  }\n\n  isNeutralState() {\n    return this.rotation === 0;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    this.calculateMatrix();\n    super.applyTo(options);\n  }\n\n  toObject() {\n    return {\n      type: this.type,\n      rotation: this.rotation,\n    };\n  }\n}\n\nclassRegistry.setClass(HueRotation);\n"],"names":["hueRotationDefaultValues","_objectSpread","colorMatrixDefaultValues","rotation","HueRotation","ColorMatrix","calculateMatrix","rad","this","Math","PI","cosine","cos","sine","sin","aThird","aThirdSqtSin","sqrt","OneMinusCos","matrix","isNeutralState","applyTo","options","super","toObject","type","_defineProperty","classRegistry","setClass"],"mappings":"oVAkBaA,EAA6CC,EAAAA,KACrDC,GAAwB,CAAA,EAAA,CAC3BC,SAAU,IAYL,MAAMC,UAAoBC,EAc/BC,eAAAA,GACE,MAAMC,EAAMC,KAAKL,SAAWM,KAAKC,GAC/BC,EAASC,EAAIL,GACbM,EAAOC,EAAIP,GACXQ,EAAS,EAAI,EACbC,EAAeP,KAAKQ,KAAKF,GAAUF,EACnCK,EAAc,EAAIP,EACpBH,KAAKW,OAAS,CACZR,EAASO,EAAc,EACvBH,EAASG,EAAcF,EACvBD,EAASG,EAAcF,EACvB,EACA,EACAD,EAASG,EAAcF,EACvBL,EAASI,EAASG,EAClBH,EAASG,EAAcF,EACvB,EACA,EACAD,EAASG,EAAcF,EACvBD,EAASG,EAAcF,EACvBL,EAASI,EAASG,EAClB,EACA,EACA,EACA,EACA,EACA,EACA,EAEJ,CAEAE,cAAAA,GACE,OAAyB,IAAlBZ,KAAKL,QACd,CAEAkB,OAAAA,CAAQC,GACNd,KAAKF,kBACLiB,MAAMF,QAAQC,EAChB,CAEAE,QAAAA,GACE,MAAO,CACLC,KAAMjB,KAAKiB,KACXtB,SAAUK,KAAKL,SAEnB,EAtDAuB,EALWtB,EAAW,OAUR,eAAasB,EAVhBtB,EAAW,WAYJJ,GAkDpB2B,EAAcC,SAASxB"}