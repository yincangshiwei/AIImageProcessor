{"version":3,"file":"Vibrance.min.mjs","sources":["../../../src/filters/Vibrance.ts"],"sourcesContent":["import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/vibrance';\n\nexport type VibranceOwnProps = {\n  vibrance: number;\n};\n\nexport const vibranceDefaultValues: VibranceOwnProps = {\n  vibrance: 0,\n};\n\n/**\n * Vibrance filter class\n * @example\n * const filter = new Vibrance({\n *   vibrance: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Vibrance extends BaseFilter<'Vibrance', VibranceOwnProps> {\n  /**\n   * Vibrance value, from -1 to 1.\n   * Increases/decreases the saturation of more muted colors with less effect on saturated colors.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} vibrance\n   * @default\n   */\n  declare vibrance: VibranceOwnProps['vibrance'];\n\n  static type = 'Vibrance';\n\n  static defaults = vibranceDefaultValues;\n\n  static uniformLocations = ['uVibrance'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.vibrance;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const max = Math.max(r, g, b);\n      const avg = (r + g + b) / 3;\n      const amt = ((Math.abs(max - avg) * 2) / 255) * adjust;\n      data[i] += max !== r ? (max - r) * amt : 0;\n      data[i + 1] += max !== g ? (max - g) * amt : 0;\n      data[i + 2] += max !== b ? (max - b) * amt : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {TWebGLUniformLocationMap} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);\n  }\n\n  isNeutralState() {\n    return this.vibrance === 0;\n  }\n}\n\nclassRegistry.setClass(Vibrance);\n"],"names":["vibranceDefaultValues","vibrance","Vibrance","BaseFilter","getFragmentSource","fragmentSource","applyTo2d","_ref","imageData","data","adjust","this","i","length","r","g","b","max","Math","avg","amt","abs","sendUniformData","gl","uniformLocations","uniform1f","uVibrance","isNeutralState","_defineProperty","classRegistry","setClass"],"mappings":"yPASO,MAAMA,EAA0C,CACrDC,SAAU,GAYL,MAAMC,UAAiBC,EAiB5BC,iBAAAA,GACE,OAAOC,CACT,CAQAC,SAAAA,CAASC,GAA4C,IAAzCC,WAAWC,KAAEA,IAA0BF,EACjD,MAAMG,GAAUC,KAAKV,SACrB,IAAK,IAAIW,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,GAAK,EAAG,CACvC,MAAME,EAAIL,EAAKG,GACTG,EAAIN,EAAKG,EAAI,GACbI,EAAIP,EAAKG,EAAI,GACbK,EAAMC,KAAKD,IAAIH,EAAGC,EAAGC,GACrBG,GAAOL,EAAIC,EAAIC,GAAK,EACpBI,EAA8B,EAAtBF,KAAKG,IAAIJ,EAAME,GAAY,IAAOT,EAChDD,EAAKG,IAAMK,IAAQH,GAAKG,EAAMH,GAAKM,EAAM,EACzCX,EAAKG,EAAI,IAAMK,IAAQF,GAAKE,EAAMF,GAAKK,EAAM,EAC7CX,EAAKG,EAAI,IAAMK,IAAQD,GAAKC,EAAMD,GAAKI,EAAM,CAC/C,CACF,CAQAE,eAAAA,CACEC,EACAC,GAEAD,EAAGE,UAAUD,EAAiBE,WAAYf,KAAKV,SACjD,CAEA0B,cAAAA,GACE,OAAyB,IAAlBhB,KAAKV,QACd,EAxDA2B,EADW1B,EAAQ,OAWL,YAAU0B,EAXb1B,EAAQ,WAaDF,GAAqB4B,EAb5B1B,EAee,mBAAA,CAAC,cA6C7B2B,EAAcC,SAAS5B"}