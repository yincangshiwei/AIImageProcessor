{"version":3,"file":"BlendColor.mjs","sources":["../../../src/filters/BlendColor.ts"],"sourcesContent":["import { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\ntype BlendColorOwnProps = {\n  color: string;\n  mode: TBlendMode;\n  alpha: number;\n};\n\nexport const blendColorDefaultValues: BlendColorOwnProps = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter<'BlendColor', BlendColorOwnProps> {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: BlendColorOwnProps['color'];\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendColorOwnProps['mode'];\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: BlendColorOwnProps['alpha'];\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  static uniformLocations = ['uColor'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const alpha = this.alpha;\n    const tr = source[0] * alpha;\n    const tg = source[1] * alpha;\n    const tb = source[2] * alpha;\n    const alpha1 = 1 - alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      let oR, oG, oB;\n      switch (this.mode) {\n        case 'multiply':\n          oR = (r * tr) / 255;\n          oG = (g * tg) / 255;\n          oB = (b * tb) / 255;\n          break;\n        case 'screen':\n          oR = 255 - ((255 - r) * (255 - tr)) / 255;\n          oG = 255 - ((255 - g) * (255 - tg)) / 255;\n          oB = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          oR = r + tr;\n          oG = g + tg;\n          oB = b + tb;\n          break;\n        case 'difference':\n          oR = Math.abs(r - tr);\n          oG = Math.abs(g - tg);\n          oB = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          oR = r - tr;\n          oG = g - tg;\n          oB = b - tb;\n          break;\n        case 'darken':\n          oR = Math.min(r, tr);\n          oG = Math.min(g, tg);\n          oB = Math.min(b, tb);\n          break;\n        case 'lighten':\n          oR = Math.max(r, tr);\n          oG = Math.max(g, tg);\n          oB = Math.max(b, tb);\n          break;\n        case 'overlay':\n          oR =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          oG =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          oB =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          oR = tr + r - (2 * tr * r) / 255;\n          oG = tg + g - (2 * tg * g) / 255;\n          oB = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          oR = tr + r * alpha1;\n          oG = tg + g * alpha1;\n          oB = tb + b * alpha1;\n      }\n      data[i] = oR;\n      data[i + 1] = oG;\n      data[i + 2] = oB;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n"],"names":["blendColorDefaultValues","color","mode","alpha","BlendColor","BaseFilter","getCacheKey","concat","type","getFragmentSource","blendColorFragmentSource","applyTo2d","_ref","imageData","data","source","Color","getSource","tr","tg","tb","alpha1","i","length","r","g","b","oR","oG","oB","Math","abs","min","max","sendUniformData","gl","uniformLocations","uniform4fv","uColor","_defineProperty","classRegistry","setClass"],"mappings":"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"}